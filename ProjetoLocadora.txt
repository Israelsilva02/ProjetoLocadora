private static void exibirMenuLocacao(Scanner scanner, ClienteServico clienteServico, VeiculoServico veiculoServico, LocacaoServico locacaoServico) {
    System.out.println("********************************************");
    System.out.println("1. Realizar Locação");
    System.out.println("2. Devolver Veículo");
    System.out.println("3. Listar Locações");
    System.out.println("0. Voltar ao menu principal");
    int opcao = scanner.nextInt();
    do {
        switch (opcao) {
            case 1:
                realizarLocacao(scanner, clienteServico, veiculoServico, locacaoServico);
                break;
            case 2:
                devolverVeiculo(scanner, locacaoServico);
                break;
            case 3:
                listarLocacoes(locacaoServico);
                break;
            case 0:
                System.out.println("Voltando ao menu principal...");
                break;
            default:
                System.out.println("Opção inválida!");
        }
    } while (opcao != 0);
}

private static void realizarLocacao(Scanner scanner, ClienteServico clienteServico, VeiculoServico veiculoServico, LocacaoServico locacaoServico) {
    System.out.println("Digite o CPF ou CNPJ do cliente: ");
    String cpfCnpj = scanner.next();
    Identificador idCliente = null;
    try {
        if (cpfCnpj.length() == 11) {
            idCliente = new CPF(cpfCnpj);
        } else if (cpfCnpj.length() == 14) {
            idCliente = new CNPJ(cpfCnpj);
        } else {
            throw new IllegalArgumentException("CPF ou CNPJ inválido!");
        }

        System.out.println("Digite a placa do veículo: ");
        String placa = scanner.next();
        Veiculo veiculo = veiculoServico.localizarVeiculo(placa);

        if (veiculo == null) {
            System.out.println("Veículo não encontrado.");
            return;
        }

        locacaoServico.realizarLocacao(idCliente, veiculo);
        System.out.println("Locação realizada com sucesso!");

    } catch (IllegalArgumentException e) {
        System.out.println(e.getMessage());
    }
}

private static void devolverVeiculo(Scanner scanner, LocacaoServico locacaoServico) {
    System.out.println("Digite o código da locação: ");
    int codigoLocacao = scanner.nextInt();

    try {
        locacaoServico.devolverVeiculo(codigoLocacao);
        System.out.println("Veículo devolvido com sucesso!");
    } catch (IllegalArgumentException e) {
        System.out.println(e.getMessage());
    }
}

private static void listarLocacoes(LocacaoServico locacaoServico) {
    List<Locacao> locacoes = locacaoServico.listarLocacoes();
    System.out.println("********************************************");
    System.out.println("Listando todas as locações");
    for (Locacao locacao : locacoes) {
        System.out.println("Código da Locação: " + locacao.getLocacaoId().getValor());
        System.out.println("Cliente: " + locacao.getCliente().getNome());
        System.out.println("Veículo: " + locacao.getVeiculo().getMarca() + " - " + locacao.getVeiculo().getPlaca());
        System.out.println("Data e hora de saída: " + locacao.getDataHoraSaida());
        if (locacao.getDataHoraRetorno() != null) {
            System.out.println("Data e hora de retorno: " + locacao.getDataHoraRetorno());
        }
        System.out.println("Local de devolução: " + locacao.getLocalDevolucao());
        System.out.println("Valor da locação: " + locacao.calcularLocacao());
        System.out.println("********************************************");
    }
}
